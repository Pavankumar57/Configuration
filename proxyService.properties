#basic auth creddentials
security.user.name=client
security.user.password=client

#configs to connect to a secured server
spring.boot.admin.username=admin
spring.boot.admin.password=admin

#configs to give secured server info
spring.boot.admin.client.metadata.user.name=${security.user.name}
spring.boot.admin.client.metadata.user.password=${security.user.password}

#management.security.enabled: false 

#Enables the Spring Boot Admin Client.
spring.boot.admin.client.enabled=true

#Comma separated ordered list of URLs of the Spring Boot Admin server to register at. This triggers the AutoConfiguration. Mandatory.
spring.boot.admin.url=http://localhost:1111,http://localhost:1112

#Http-path of registration endpoint at your admin server.
#spring.boot.admin.api-path="api/applications"

#Username and password for http-basic authentication. If set the registration uses http-basic-authentication when registering at the admin server.
spring.boot.admin.username=admin
spring.boot.admin.password=admin

#Interval for repeating the registration (in ms).
spring.boot.admin.period=10

#If set to true the periodic task to register the application is automatically scheduled after the application is ready.
spring.boot.admin.auto-registration=true

#Switch to enable auto-deregistration at Spring Boot Admin server when context is closed.
spring.boot.admin.auto-deregistration=false

#If set to true the client will only register against one admin server (in order defined by spring.boot.admin.url); if that admin server goes down,
# will automatically register against the next admin server. If false, will register against all admin servers.
#spring.boot.admin.register-once=true

#Client-health-url to register with. Can be overridden in case the reachable URL is different (e.g. Docker). Must be unique in registry.
#Guessed based on management-url and endpoints.health.id.
#spring.boot.admin.client.health-url

#Client-management-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).
#Guessed based on service-url, server.servlet-path, management.port and management.context-path.
#spring.boot.admin.client.management-url

#Client-service-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).
#Guessed based on hostname, server.port and server.context-path.
#spring.boot.admin.client.service-url

#Name to register with
#${spring.application.name} if set, "spring-boot-application" otherwise.

#spring.boot.admin.client.name

#Use the ip-address rather then the hostname in the guessed urls. If server.address / management.address is set, 
#it get used. Otherwise the IP address returned from InetAddress.getLocalHost() gets used.
#spring.boot.admin.client.prefer-ip=false


### to register all eureka clients

#Enables the DiscoveryClient-support for the admin server.
spring.boot.admin.discovery.enabled=true

#Will be appended to the service-url of the discovered service when the managment-url is converted by the DefaultServiceInstanceConverter.
#spring.boot.admin.discovery.converter.management-context-path=${management.context-path}

#Will be appended to the management-url of the discovered service when the health-url is converted by the DefaultServiceInstanceConverter.
#default - "health"
#spring.boot.admin.discovery.converter.health-endpoint=

#This services will be ignored when using discovery and not registered as application.
#spring.boot.admin.discovery.ignored-services=